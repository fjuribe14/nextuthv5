generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id            String          @id
  name          String
  email         String          @unique
  phone         String
  address       String
  apiKey        String          @unique
  ci            String
  Order         Order[]
  PaymentMethod PaymentMethod[]
  Product       Product[]
}

model Image {
  id        String  @id
  url       String
  productId String
  Product   Product @relation(fields: [productId], references: [id])
}

model Invoice {
  id      String   @id
  orderId String
  date    DateTime @default(now())
  total   Decimal
  status  String   @default("pending")
  Order   Order    @relation(fields: [orderId], references: [id])
}

model Order {
  id           String         @id
  clientId     String
  date         DateTime       @default(now())
  total        Decimal
  status       String         @default("pending")
  Invoice      Invoice[]
  Client       Client         @relation(fields: [clientId], references: [id])
  OrderProduct OrderProduct[]
  Payment      Payment[]
}

model OrderProduct {
  id        String  @id
  orderId   String
  productId String
  quantity  Int
  Order     Order   @relation(fields: [orderId], references: [id])
  Product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id              String        @id
  orderId         String
  paymentMethodId String
  date            DateTime      @default(now())
  amount          Decimal
  Order           Order         @relation(fields: [orderId], references: [id])
  PaymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
}

model PaymentMethod {
  id          String    @id
  name        String
  description String
  clientId    String
  Payment     Payment[]
  Client      Client    @relation(fields: [clientId], references: [id])
}

model Product {
  id           String         @id
  name         String
  description  String
  price        Decimal
  stock        Int
  clientId     String
  Image        Image[]
  OrderProduct OrderProduct[]
  Client       Client         @relation(fields: [clientId], references: [id])
}

model Profile {
  id     String  @id
  bio    String?
  userId String  @unique
  User   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum UserRole {
  USER
  ADMIN
}

// password      String?
// role          UserRole[]      @default([USER])

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  ProfileId     String?
  password      String?
  profile       Profile?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          UserRole[]      @default([USER])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  email   String   @unique
  token   String   @unique
  expires DateTime
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
